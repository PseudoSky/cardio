#!/usr/bin/env node

var optimist = require('optimist'),
    mime = require('mime'),
    commandLineOptions = optimist
        .usage('Measure your code bases fitness\n$0 [-r <inputRootDirectory>] <htmlFile(s)>')
        .options('h', {
            alias: 'help',
            describe: 'Show this help',
            type: 'boolean',
            default: false
        })
        .options('r', {
            alias: 'root',
            describe: 'Path to your web root. Omission will make $0 take a best guess',
            type: 'string',
            demand: false
        })
        .wrap(72)
        .argv;

if (commandLineOptions.h) {
    optimist.showHelp();
    process.exit(1);
}

var urlTools = require('assetgraph/lib/util/urlTools'),
    rootUrl = commandLineOptions.root && urlTools.urlOrFsPathToUrl(commandLineOptions.root, true),
    inputUrls;

if (commandLineOptions._.length > 0) {
    inputUrls = commandLineOptions._.map(function (urlOrFsPath) {
        return urlTools.urlOrFsPathToUrl(urlOrFsPath, false);
    });
    if (!rootUrl) {
        rootUrl = urlTools.findCommonUrlPrefix(inputUrls.filter(function (inputUrl) {
            return (/^file:/).test(inputUrl);
        }));
    }
} else if (rootUrl && /^file:/.test(rootUrl)) {
    inputUrls = [rootUrl + '**/*.html'];
    console.warn('No input files specified, defaulting to ' + inputUrls[0]);
} else {
    throw new Error("No input files and no --root specified (or it isn't file:), cannot proceed");
}

if (!rootUrl && inputUrls.length === 1) {
    rootUrl = inputUrls[0];
}


var AssetGraph = require('assetgraph'),
    query = AssetGraph.query,
    followRelationsQueryObj = query.not({
        type: 'HtmlAnchor',
        to: {
            url: /^https?:/
        }
    }),
    colors = require('colors'),
    notepad = {};

new AssetGraph({root: rootUrl})
    .on('error', function (err) {
        console.error(' ✘ '.red + err.message);
    })
    .on('addAsset', function (asset) {
        if (asset.url) {
            console.warn(' ✔ '.green + asset.url);
        }
    })
    .registerRequireJsConfig()
    .loadAssets(inputUrls)
    .populate({followRelations: followRelationsQueryObj})
    .queue(function fixBaseAssetsOfUnresolvedOutgoingRelationsFromHtmlFragments(assetGraph) {
        assetGraph.findRelations({from: {type: 'Html', isFragment: true, isInitial: true}}, true).forEach(function (relation) {
            if (relation._baseAssetPath === null) {
                delete relation._baseAssetPath;
            }
        });
    })
    .populate({followRelations: followRelationsQueryObj, startAssets: {type: 'Html', isFragment: true, isInitial: true}})
    .compileLessToCss()
    .compileStylusToCss()
    .compileCoffeeScriptToJavaScript()

    // CSS Complexity
    .queue(require('../lib/transforms/measureCssComplexity')({type: 'Css'}, notepad))

    // Assets sizes
    .queue(function (assetGraph) {
        notepad.assetSizes = {};
        assetGraph.findAssets({isInline: false, isLoaded: true}).forEach(function (asset) {
            var type = asset.type;
            if (type === 'Asset') {
                type = asset.contentType;
                var extension = (asset.extension || '').replace(/^[^.]*\./, '');
                console.warn(extension, mime.types[extension])
                if (extension && type === 'application/octet-stream') {
                    if (extension in mime.types) {
                        type = mime.types[extension];
                    } else {
                        type = extension;
                    }
                }
            }
            notepad.assetSizes[type] = (notepad.assetSizes[type] || 0) + asset.rawSrc.length;
        })
    })

    // Console output
    .queue(function (assetGraph) {
        console.warn("And the verdict's in:\n", JSON.stringify(notepad, null, 4));
    })

    .run(function (err) {
        if (err) {
            throw err;
        }
    });
